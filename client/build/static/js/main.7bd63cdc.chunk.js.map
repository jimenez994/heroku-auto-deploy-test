{"version":3,"sources":["logo.svg","componets/weatherApp.js","componets/githubApp.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","weatherApp","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","search","output","onChange","bind","assertThisInitialized","onSubmit","e","_this2","preventDefault","isValidZip","test","searchType","concat","Axios","get","then","res","tempAF","Math","ceil","data","main","temp","setState","catch","err","defineProperty","target","name","value","react_default","a","createElement","type","Component","githubApp","userInfo","error","console","log","_this$setState","src","alt","login","avatar_url","App","BrowserRouter","className","logo","href","rel","Link","to","Route","path","component","WeatherApp","GithubApp","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7bd63cdc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nimport Axios from 'axios';\nexport default class weatherApp extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      search :'',\n      output: ''\n    }\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onSubmit(e){\n    e.preventDefault();\n    var isValidZip = /(^\\d{5}$)|(^\\d{5}-\\d{4}$)/.test(this.state.search);\n    var searchType = `q=${this.state.search}` \n    if(isValidZip === true){\n      searchType = `zip=${this.state.search}`\n    }\n    Axios.get(`http://api.openweathermap.org/data/2.5/weather?${searchType}&APPID=bb9e615b330eecf16100fe0b2e388e96`)\n      .then( res => {\n        var tempAF = Math.ceil((res.data.main.temp - 273.15) * 9/5 + 35)\n        this.setState({output: tempAF})\n      })\n      .catch( err => {\n        this.setState({output: 'sorry something went wrong'})\n      })\n  }\n  onChange(e){\n    this.setState({[e.target.name] : e.target.value})\n  }\n  render() {\n    return (\n      <div>\n        <h2>Weather App</h2>\n        <form onSubmit={this.onSubmit}>\n          <p>{this.state.output} FÂº </p>\n          <input type='text' name='search' onChange={this.onChange}/>\n          <button type='submit'>Search</button>\n        </form>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Axios from 'axios'\nexport default class githubApp extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      userInfo : '',\n      error:'',\n      search : ''\n    }\n    this.onChange = this.onChange.bind(this)\n    this.onSubmit = this.onSubmit.bind(this)\n  }\n\n  onSubmit(e){\n    e.preventDefault();\n    console.log(this.state.search);\n    Axios.get(`https://api.github.com/users/${this.state.search}`)\n      .then(res => {\n        this.setState({userInfo: res.data})\n        console.log(this.state.userInfo)\n      })\n      .catch(err => {\n        console.log(err)\n        this.setState({error: 'Sorry something went wrong'})\n      })\n    \n  }\n  onChange(e){\n    this.setState({[e.target.name]: e.target.value, error: ''})\n  }\n  render() {\n    return (\n      <div>\n        <h2>github app</h2>\n        <img src=\"https://thumbsnap.com/t/acp0ghYY.jpg\" alt=\"ThumbSnap\" />\n        <form onSubmit={this.onSubmit}>\n          <input type=\"text\" name='search' onChange={this.onChange} ></input>\n          <button type=\"submit\"> Find</button>\n        </form>\n        <h3>{this.state.error}</h3>\n        <h3>{this.state.userInfo.login}</h3>\n        <img src={this.state.userInfo.avatar_url} alt=''/>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport WeatherApp from './componets/weatherApp';\nimport GithubApp from './componets/githubApp'; \nimport {BrowserRouter as Router, Route, Link} from 'react-router-dom'\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <p>\n              Adding react to the project is a success!\n            </p>\n            <a\n              className=\"App-link\"\n              href=\"https://reactjs.org\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              >\n              Learn React\n            </a>\n            <Link to=\"/weather\"> Weather</Link>\n            <Link to=\"/git\"> Git</Link>\n            <Route path=\"/weather\" component={WeatherApp}/>\n            <Route path=\"/git\" component={GithubApp}/>\n          </header>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}